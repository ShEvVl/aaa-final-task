import random
import time
from typing import Dict, List, Tuple

import click


class Pizza:
    """–ö–ª–∞—Å—Å –ø–∏—Ü—Ü–∞.
    –ò–º–µ–µ—Ç —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏:
        - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (__init__());
        - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (__eq__());
        - –∑–∞–ø—Ä–æ—Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ (get_ingredients()).
    """

    ingredients: List[str] = []
    img: str = ""

    def __init__(self, size: str = "L") -> None:
        if size not in ("L", "XL"):
            raise ValueError("–†–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'L' –∏–ª–∏ 'XL'")
        self.name = self.__class__.__name__
        self.size = size
        self.ingredients = self.__class__.ingredients
        self.img = self.__class__.img

    def __eq__(self, other) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞:
            - –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∏—Ü—Ü—ã;
            - –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ);
            - —Ä–∞–∑–º–µ—Ä—É –ø–∏—Ü—Ü—ã.

        Args:
            other (class): –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞

        Returns:
            bool: True - –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω—ã, False - –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –Ω–µ—Ç
        """
        if isinstance(other, Pizza):
            return (
                self.name == other.name
                and sorted(self.ingredients) == sorted(other.ingredients)
                and self.size == other.size
            )
        return False

    def get_ingredients(self) -> Dict[str, List[str]]:
        """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –ø–∏—Ü—Ü—ã
        Returns:
            Dict[str, List[str]]: —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã,
            –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
        """
        return {self.name: self.ingredients}


class Margherita(Pizza):
    """–ö–ª–∞—Å—Å –ø–∏—Ü—Ü—ã –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞.
    –°–æ—Å—Ç–∞–≤: "tomato sauce", "mozzarella", "tomatoes"
    """

    ingredients = ["tomato sauce", "mozzarella", "tomatoes"]
    img = "üßÄ"


class Pepperoni(Pizza):
    """–ö–ª–∞—Å—Å –ø–∏—Ü—Ü—ã –ü–µ–ø–ø–µ—Ä–æ–Ω–∏.
    –°–æ—Å—Ç–∞–≤: "tomato sauce", "mozzarella", "pepperoni"
    """

    ingredients = ["tomato sauce", "mozzarella", "pepperoni"]
    img = "üçï"


class Hawaiian(Pizza):
    """–ö–ª–∞—Å—Å –ì–∞–≤–∞–π—Å–∫–æ–π –ø–∏—Ü—Ü—ã.
    –°–æ—Å—Ç–∞–≤: "tomato sauce", "mozzarella", "chicken", "pineapple"
    """

    ingredients = ["tomato sauce", "mozzarella", "chicken", "pineapple"]
    img = "üçç"


class PizzaMenu:
    """–ö–ª–∞—Å—Å –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏.
    –ò–º–µ–µ—Ç –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é:
        - –∑–∞–ø—Ä–æ—Å –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏ (menu()) –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @staticmethod
    """

    @staticmethod
    def menu() -> Dict[str, Tuple[str, Tuple[str, str], List[str]]]:
        """–ú–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏.

        Returns:
            Dict: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã: (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, (–≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤), —Å–æ—Å—Ç–∞–≤)
        """
        recipes = {
            "Margherita": (
                "üßÄ",
                ("L", "XL"),
                ["tomato sauce", "mozzarella", "tomatoes"],
            ),
            "Pepperoni": (
                "üçï",
                ("L", "XL"),
                ["tomato sauce", "mozzarella", "pepperoni"],
            ),
            "Hawaiian": (
                "üçç",
                ("L", "XL"),
                ["tomato sauce", "mozzarella", "chicken", "pineapple"],
            ),
        }
        return recipes


def log(message_template: str):
    """–§—É–Ω–∫—Ü–∏—è-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–±–æ–ª–æ—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        message_template (str): –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    """

    def decorator(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä

        Args:
            func (func): –ø–µ—Ä–µ–¥–∞—á–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–ª—å—à–µ
        """

        def wrapper(*args, **kwargs):
            """–û–±–µ—Ä—Ç–∫–∞

            Returns:
                result: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
            """
            start_time = time.time()
            result = func(*args, **kwargs)
            end_time = time.time()
            elapsed_time = end_time - start_time
            message = f"{message_template} {elapsed_time:.0f} c!"
            print(message)
            return result

        return wrapper

    return decorator


@log("üßë‚Äçüç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞")
def bake(pizza_obj: Pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    name, ingredients = list(pizza_obj.get_ingredients().items())[0]
    time.sleep(random.randint(2, 5))
    print(f"–ü–∏—Ü—Ü–∞ {name!r} –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∞\n –°–æ—Å—Ç–∞–≤: {', '.join(ingredients)}")


@log("üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞")
def delivery(pizza: str):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    time.sleep(random.randint(2, 5))
    print(f"–ü–∏—Ü—Ü–∞ {pizza!r} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")


@log("üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞")
def pickup(pizza: str):
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""
    time.sleep(random.randint(2, 5))
    print(f"–ü–∏—Ü—Ü—É {pizza!r} –∑–∞–±—Ä–∞–ª–∏")


@click.group()
def cli():
    pass


@cli.command()
@click.option("--courier", default=False, is_flag=True)
@click.argument("pizza")
@click.argument("size")
def order(pizza: str, size: str, courier: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    call = {
        "Margherita": Margherita(size),
        "Pepperoni": Pepperoni(size),
        "Hawaiian": Hawaiian(size),
    }
    pizza = pizza.capitalize()
    pizza_obj = call[pizza]

    if courier:
        print(
            f"–ì–æ—Ç–æ–≤–∏–º –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º {pizza_obj.__class__.__name__!r} "
            f"—Ä–∞–∑–º–µ—Ä {pizza_obj.size!r}"
        )
        bake(pizza_obj)
        delivery(pizza)
    else:
        print(
            f"–ì–æ—Ç–æ–≤–∏–º –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑ {pizza_obj.__class__.__name__!r} "
            f"—Ä–∞–∑–º–µ—Ä {pizza_obj.size!r}"
        )
        bake(pizza_obj)
        pickup(pizza)


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    for name, (img, size, ingredients) in PizzaMenu.menu().items():
        print(
            f"- {name} {img} size:({size[0]!r}/{size[1]!r}): "
            f"{', '.join(ingredients)}"
        )


if __name__ == "__main__":
    cli()
